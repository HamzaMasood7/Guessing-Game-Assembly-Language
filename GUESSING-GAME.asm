


data segment 
    
  line1 db "************************$"
  Mesg1 db 10,13,"      Guessing Game     $" 
  newline db 10,13,"$"
              
               
  more db "Value is more$"
  less db "Value is less$"
  
  error db "Error - Number is out of range!$"
  
  enter db "Please enter a valid number: $"
  
  guess db "You have made a fine Guess!$"
  
  mesg2 db "Do you want to guess more [Y|N]$"
   
  inputuser db 0
  guessnumber db 0
  
  
     seconds db 0
     hours db   0
     minute db 0   
     
     var1 dw 0  
     var2 dw 0
  
     count dw ?
     input db ?
              
     loop_counter db 10             ; loop counter will run 10 times   
     
     check_input_255 dw 0
              
ends

stack segment
    dw   128  dup(0)
ends

code segment
start:

   mov ax,@data                      
   mov ds,ax 
                        
   
    MOV LOOP_COUNTER,10 ; NEW
  
   
   
   
                                     ;   Display   ******************
                                     ;               Guessing Game
                                     ;             ******************
                                     
   lea dx,[line1]
   mov ah,9
   int 21h
   
   lea dx,[mesg1]
   mov ah,9
   int 21h  
   
   call newline_func                 ;  newline function is executed
   
   
   lea dx,[line1]
   mov ah,9
   int 21h
   
   
   call newline_func
   
   
   
   call random_num_generator       ;  random number is generated by this function 
                                   ;  see how number is generated at the end
   
   
                                   ; input from user start here
   
   
    loop_again1:
     mov inputuser,0               ; initaialize inputuser=0  
     mov check_input_255,0
     
     mov count,0                   ; and count=0
      
    call newline_func              
                                   
                                   ; String Display = Please enter a valid number:
    lea dx,[enter]
    mov ah,9
    int 21h
    
   
   mov ah,01h                      ;for character input interupt 
   
   
   
  while_:                      
   
  int 21h 
  mov [input],al                  ; After input, Character is stored into al
                                  ; so storing chaarcter in al
                                                                  
  cmp al,0dh                      ; If user presses enter we compare it with its asci and end loop
  je out_of_while
  
  cmp input,30h                   ; only push if its ntween 0-9 digit
  jnae dont_push
  
  
  cmp input,39h
  jnbe dont_push
  
  push word ptr [input]           ; push input into stack
  inc [count]                     ; increment count
   
   dont_push:
   
   jmp while_                     ; loop until users preses enter
  out_of_while:                   ; end input loop
   
 
 cmp count,0                      ; NO digit enetered so out of range
 je out_range 
  
cmp count,3                       
jg out_range
 
mov inputuser,0                   ;inputuser=0 
mov check_input_255,0
mov cx,[count]                    ; cx=count    loop will work the same amount of time as our input characters from user
mov bl,1    
    
for:                              
pop dx                            ; pop input 

  
   mov al,dl  
   
   cmp al,45                      ; if negative value or "-" is used we end loop and jump to out of range statement
   je out_range
   
   
   
                                  ; convert asci input to decimal and then into number
                                  ; for example user enters= 34 
   sub al,30h                     ; we first take 4 which is stored as 34
   mul bl                         ; we then minus 30 so we are left with 4 
   add check_input_255,ax                                                                          
   add inputuser,al               ; multiply 4 with 1 as base is 1 4*1=4
   mov al,bl                      ; 3 will convert and then multiply with 10 
   mov bl,0ah                     ; bl is base here. it multiples with digits
   mul bl                         ; 3*10=30 we then plus 30 and 4 so ans = 34    
   mov bl,al
       
   cmp check_input_255,255        ; if more than 255 so jump to out of range
   jg out_range   
       
loop for 
    
    
   
    
    
    
   mov al,inputuser               ; al=input user value
   
  
   
  
   
   
   cmp al,guessnumber             ; compare the random number with user input
   je equal_condition
    
   
   cmp al,guessnumber             ; jump according to situations
   jae greater_condtion
                                  ; greater, lesser or equal
   
   
   cmp al,guessnumber
   jnae lesser_condtion
      
  
;   cmp al,0ffh
;   jc out_range   
        
    jmp out_of_loop  
    
    
   
    equal_condition:              ; Equal condition
    call newline_func
    lea dx,guess
    mov ah,9
    int 21h  
    jmp loop_end                  ; if user gueses the right answer we end this part and move on to asking again user to play again
    
              
              
              
    out_range:                   ; Out of range
     call newline_func
    lea dx,error
    mov ah,9
    int 21h
    jmp out_of_loop
                       
                       
                       
    greater_condtion:            ; value is greater 
     call newline_func
     lea dx,less
    mov ah,9
    int 21h
    jmp out_of_loop
     
                      
                      
                      
    lesser_condtion:            ; value is less 
       call newline_func
     lea dx,more
    mov ah,9
    int 21h
    jmp out_of_loop
    
                     
                     
    out_of_loop:               ; end loop
                      
                      
                      
      dec loop_counter         ; decremenet loop_counter 
                               ; 10 times loop will run 
    
       cmp  loop_counter,0
       jne loop_again1         ; when loopcounter is 0 we end this part and move on to asking user to paly again 
    
       loop_end:
    
    
    
   ;                          Ask the user if he wants to end the program or start the game again  
   
   ask_again:
   
   call newline_func
    
   
   lea dx,[mesg2]            ; string output :  Do you want to guess more [Y|N]
   mov ah,9
   int 21h
   
   mov ah,1                  
   int 21h
   
   cmp al,"y"                ; user enters Y or y we start the program again
   je loop_again 
   
   cmp al,"Y"
   je loop_again 
   
   jmp endprogram
   
   
   loop_again:
                             ; clear screen
    mov ah,00
    mov al,02
    int 10h
    
   
    jmp start               ; program starts from begining 
    
    endprogram:
    
   cmp al,"N"               ; if user enters N or n we end the program
   je end_p 
   
   cmp al,"n"
   je end_p
   
   
   jmp ask_again            ; if user enters wrong character it jumps to asking the same question again
   
   end_p:                   ; end program

mov ax, 4c00h
int 21h  
          
          
  
  
  
  newline_func proc         ; newline function
    lea dx,newline
    mov ah,9
    int 21h
    ret
    newline_func endp
  
  
  
  
  
  
  
  
  
  
  
  
          
          
 
 random_num_generator proc 
 
          
 mov ah,2ch                  ; get current clock time value
 int 21h                     
                            
                             ;                       H : M  : S 
                             ; example current time 12 : 4  : 43   
                             ; THEN 
 
 mov seconds,dh              ; seconds= 43 
 mov hours,ch                ; hours  = 12
 mov minute,cl               ; minute = 04
   
   
   
 add seconds,3               ; intializing some values incase the time is 00
 add hours,3
 add minute,2
 
 mov ah,0
                             ; seconds * minutes= ax
 mov al,seconds 
 mov bl,minute
 
 mul bl
      
 compare_255:
 

  
 cmp ax,256                    ; (minutes*seconds) / hours
 jg div_instruction
                               ; untill value is below 255
 
      
 mov guessnumber,al  
 ret  
 div_instruction:
  
 mov bl,hours
 div bl
 jmp compare_255 
          
          
 random_num_generator endp         
          
          
          
          
          
          
          
          
          
          
          
          
          
ends

end start
